#!/usr/bin/env bash

install_AUR_pkg()
{
    if [ ! -d "$HOME/.cache/AUR/$1" ] ; then
	echo ""
        echo "`tput setaf 1`Installing $1...`tput sgr0`"
        paru -S "$1"
    fi
}

[ "$(id -u)" -eq 0 ] && { echo "Run $0 as yourself (not as root), exiting"; exit 1; }

cd "${0%/*}" || exit 2

sudo sed -i 's/^#Color$/Color/' /etc/pacman.conf
sudo sed -i 's/^#ParallelDownloads/ParallelDownloads/' /etc/pacman.conf
sudo pacman -Syu --noconfirm --needed etckeeper git
if [ ! -d /etc/.git ] ; then
    pushd /etc || exit 3
    sudo etckeeper init
    sudo git config user.email "root@$(uname -n)"
    sudo git config user.name "root"
    sudo etckeeper commit 'Initial commit'
    popd || exit 4
fi
if $(mount | grep ' / ' | grep btrfs); then
    if ! sudo snapper list > /dev/null ; then
        sudo pacman -S --noconfirm --needed snap-pac snapper
        sudo sed -i 's/^#\[root\]$/[root]/' /etc/snap-pac.ini
        sudo sed -i 's/^#important_packages/important_packages/' /etc/snap-pac.ini
        # sudo sed -i 's/^#important_commands/important_commands/' /etc/snap-pac.ini
        sudo sed -i 's/^important_commands.*/important_commands = ["pacman -Syu", "pacman --sync -y -u --"]/' /etc/snap-pac.ini
        sudo umount /.snapshots
        sudo rmdir /.snapshots
        sudo snapper --config root create-config /
        sudo btrfs subvolume delete /.snapshots
        sudo mkdir /.snapshots
        sudo mount -a
        sudo chmod 750 /.snapshots
        sudo chown :wheel /.snapshots
        sudo sed -i 's/^ALLOW_GROUPS=.*/ALLOW_GROUPS="wheel"/' /etc/snapper/configs/root
        sudo snapper --config root create --description 'Initial @ snapshot'
        sudo snapper --config home create-config /home
        sudo sed -i 's/^ALLOW_GROUPS=.*/ALLOW_GROUPS="wheel"/' /etc/snapper/configs/home
        sudo snapper --config home create --description 'Initial @home snapshot'
        sudo pacman -S --noconfirm --needed grub-btrfs inotify-tools rsync
        sudo systemctl enable --now grub-btrfsd.service
        sudo systemctl enable --now snapper-cleanup.timer
        sudo systemctl enable --now snapper-timeline.timer
        sudo systemctl enable --now systemd-boot-update
        sudo grub-mkconfig -o /boot/grub/grub.cfg
        if [ ! -e /etc/pacman.d/hooks/95-bootbackup.hook ] ; then
            sudo mkdir -p /etc/pacman.d/hooks
            {
                echo "[Trigger]"
                echo "Operation = Upgrade"
                echo "Operation = Install"
                echo "Operation = Remove"
                echo "Type = Path"
                echo "Target = usr/lib/modules/*/vmlinuz"
                echo ""
                echo "[Action]"
                echo "Depends = rsync"
                echo "Description = Backing up /boot..."
                echo "When = PostTransaction"
                echo "Exec = /usr/bin/rsync -a --delete /boot/ /.bootbackup/"
            } | sudo tee /etc/pacman.d/hooks/95-bootbackup.hook
            sudo mkdir -p /.bootbackup
            sudo rsync -a --delete /boot/ /.bootbackup/
        fi
    fi
fi

sudo pacman -S --noconfirm --needed base-devel btrfs-progs edk2-shell efibootmgr gptfdisk inetutils man-db man-pages parted
sudo cp /usr/share/edk2-shell/x64/Shell.efi /boot/shellx64.efi
sudo pacman -S --noconfirm --needed acpi bat colordiff curl diff-so-fancy fzf keychain lsof mc mosh myrepos openssh syncthing tailscale tk tmux vcsh vim z zsh
sudo systemctl enable --now sshd.service
sudo systemctl enable --now tailscaled
systemctl --user enable --now syncthing.service

mkdir -p ~/.cache/AUR
mkdir -p ~/.config/customizepkg
grep AURDEST             ~/.exports > /dev/null || grep AURDEST             ~/.bashrc > /dev/null || echo "export AURDEST=~/.cache/AUR" >> ~/.bashrc
grep CUSTOMIZEPKG_CONFIG ~/.exports > /dev/null || grep CUSTOMIZEPKG_CONFIG ~/.bashrc > /dev/null || echo "export CUSTOMIZEPKG_CONFIG=~/.config/customizepkg" >> ~/.bashrc

# shellcheck source=/dev/null
source ~/.bashrc

command -v paru > /dev/null || ( cd ~/.cache/AUR && git clone https://aur.archlinux.org/paru-bin.git && cd paru-bin && makepkg -si )

if [ ! -d "$HOME/.cache/AUR/customizepkg-git" ] ; then
    rm ~/.config/paru/paru.conf
    paru -S customizepkg-git
fi

if [ ! -e ~/.config/paru/paru.conf ] ; then
    mkdir -p ~/.config/paru
    {
        echo "[options]"
        echo "BottomUp"
        echo "[bin]"
        echo "PreBuildCommand = customizepkg --modify"
    } >> ~/.config/paru/paru.conf
fi

install_AUR_pkg aurutils
install_AUR_pkg autofs
install_AUR_pkg brave-bin
install_AUR_pkg console-solarized-git
# install_AUR_pkg dropbox
install_AUR_pkg duplicacy
install_AUR_pkg gnome-icon-theme
install_AUR_pkg k3sup-bin
install_AUR_pkg liquidprompt
install_AUR_pkg qpdfview
install_AUR_pkg simplescreenrecorder
install_AUR_pkg snapper-rollback
install_AUR_pkg stack-static
install_AUR_pkg ttf-iosevka
install_AUR_pkg ttf-ms-fonts
install_AUR_pkg update-grub
install_AUR_pkg vi-vim-symlink

echo "" && ip a | grep 'inet ' && echo "" && echo "ssh from bethel to complete setup"
